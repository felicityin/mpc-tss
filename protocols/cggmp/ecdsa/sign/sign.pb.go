// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v3.21.4
// source: sign.proto

package sign

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Represents a BROADCAST message sent to all parties during Round 1 of the TSS signing protocol.
type SignRound1Message1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KCiphertext     []byte `protobuf:"bytes,1,opt,name=k_ciphertext,json=kCiphertext,proto3" json:"k_ciphertext,omitempty"`
	GammaCiphertext []byte `protobuf:"bytes,2,opt,name=gamma_ciphertext,json=gammaCiphertext,proto3" json:"gamma_ciphertext,omitempty"`
}

func (x *SignRound1Message1) Reset() {
	*x = SignRound1Message1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound1Message1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound1Message1) ProtoMessage() {}

func (x *SignRound1Message1) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound1Message1.ProtoReflect.Descriptor instead.
func (*SignRound1Message1) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{0}
}

func (x *SignRound1Message1) GetKCiphertext() []byte {
	if x != nil {
		return x.KCiphertext
	}
	return nil
}

func (x *SignRound1Message1) GetGammaCiphertext() []byte {
	if x != nil {
		return x.GammaCiphertext
	}
	return nil
}

// Represents a P2P message sent to all parties during Round 1 of the EDDSA TSS signing protocol.
type SignRound1Message2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncProof []byte `protobuf:"bytes,1,opt,name=enc_proof,json=encProof,proto3" json:"enc_proof,omitempty"`
}

func (x *SignRound1Message2) Reset() {
	*x = SignRound1Message2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound1Message2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound1Message2) ProtoMessage() {}

func (x *SignRound1Message2) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound1Message2.ProtoReflect.Descriptor instead.
func (*SignRound1Message2) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{1}
}

func (x *SignRound1Message2) GetEncProof() []byte {
	if x != nil {
		return x.EncProof
	}
	return nil
}

// Represents a P2P message sent to all parties during Round 2 of the TSS signing protocol.
type SignRound2Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ssid         []byte `protobuf:"bytes,1,opt,name=ssid,proto3" json:"ssid,omitempty"`
	BigGamma     []byte `protobuf:"bytes,2,opt,name=big_gamma,json=bigGamma,proto3" json:"big_gamma,omitempty"`
	D            []byte `protobuf:"bytes,3,opt,name=d,proto3" json:"d,omitempty"`
	F            []byte `protobuf:"bytes,4,opt,name=f,proto3" json:"f,omitempty"`
	DHat         []byte `protobuf:"bytes,5,opt,name=d_hat,json=dHat,proto3" json:"d_hat,omitempty"`
	FHat         []byte `protobuf:"bytes,6,opt,name=f_hat,json=fHat,proto3" json:"f_hat,omitempty"`
	AffgProof    []byte `protobuf:"bytes,7,opt,name=affg_proof,json=affgProof,proto3" json:"affg_proof,omitempty"`
	AffgHatProof []byte `protobuf:"bytes,8,opt,name=affg_hat_proof,json=affgHatProof,proto3" json:"affg_hat_proof,omitempty"`
	LogProof     []byte `protobuf:"bytes,9,opt,name=log_proof,json=logProof,proto3" json:"log_proof,omitempty"`
}

func (x *SignRound2Message) Reset() {
	*x = SignRound2Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound2Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound2Message) ProtoMessage() {}

func (x *SignRound2Message) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound2Message.ProtoReflect.Descriptor instead.
func (*SignRound2Message) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{2}
}

func (x *SignRound2Message) GetSsid() []byte {
	if x != nil {
		return x.Ssid
	}
	return nil
}

func (x *SignRound2Message) GetBigGamma() []byte {
	if x != nil {
		return x.BigGamma
	}
	return nil
}

func (x *SignRound2Message) GetD() []byte {
	if x != nil {
		return x.D
	}
	return nil
}

func (x *SignRound2Message) GetF() []byte {
	if x != nil {
		return x.F
	}
	return nil
}

func (x *SignRound2Message) GetDHat() []byte {
	if x != nil {
		return x.DHat
	}
	return nil
}

func (x *SignRound2Message) GetFHat() []byte {
	if x != nil {
		return x.FHat
	}
	return nil
}

func (x *SignRound2Message) GetAffgProof() []byte {
	if x != nil {
		return x.AffgProof
	}
	return nil
}

func (x *SignRound2Message) GetAffgHatProof() []byte {
	if x != nil {
		return x.AffgHatProof
	}
	return nil
}

func (x *SignRound2Message) GetLogProof() []byte {
	if x != nil {
		return x.LogProof
	}
	return nil
}

// Represents a P2P message sent to all parties during Round 3 of the TSS signing protocol.
type SignRound3Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Delta    []byte `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	BigDelta []byte `protobuf:"bytes,2,opt,name=big_delta,json=bigDelta,proto3" json:"big_delta,omitempty"`
	LogProof []byte `protobuf:"bytes,3,opt,name=log_proof,json=logProof,proto3" json:"log_proof,omitempty"`
}

func (x *SignRound3Message) Reset() {
	*x = SignRound3Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound3Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound3Message) ProtoMessage() {}

func (x *SignRound3Message) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound3Message.ProtoReflect.Descriptor instead.
func (*SignRound3Message) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{3}
}

func (x *SignRound3Message) GetDelta() []byte {
	if x != nil {
		return x.Delta
	}
	return nil
}

func (x *SignRound3Message) GetBigDelta() []byte {
	if x != nil {
		return x.BigDelta
	}
	return nil
}

func (x *SignRound3Message) GetLogProof() []byte {
	if x != nil {
		return x.LogProof
	}
	return nil
}

// Represents a BROADCAST message sent to all parties during Round 4 of the TSS signing protocol.
type SignRound4Message struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sigma []byte `protobuf:"bytes,1,opt,name=sigma,proto3" json:"sigma,omitempty"`
}

func (x *SignRound4Message) Reset() {
	*x = SignRound4Message{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sign_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignRound4Message) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignRound4Message) ProtoMessage() {}

func (x *SignRound4Message) ProtoReflect() protoreflect.Message {
	mi := &file_sign_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignRound4Message.ProtoReflect.Descriptor instead.
func (*SignRound4Message) Descriptor() ([]byte, []int) {
	return file_sign_proto_rawDescGZIP(), []int{4}
}

func (x *SignRound4Message) GetSigma() []byte {
	if x != nil {
		return x.Sigma
	}
	return nil
}

var File_sign_proto protoreflect.FileDescriptor

var file_sign_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x74, 0x73,
	0x73, 0x6c, 0x69, 0x62, 0x2e, 0x63, 0x67, 0x67, 0x6d, 0x70, 0x2e, 0x73, 0x69, 0x67, 0x6e, 0x2e,
	0x65, 0x63, 0x64, 0x73, 0x61, 0x22, 0x62, 0x0a, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75,
	0x6e, 0x64, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x31, 0x12, 0x21, 0x0a, 0x0c, 0x6b,
	0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x0b, 0x6b, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x12, 0x29,
	0x0a, 0x10, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x5f, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x67, 0x61, 0x6d, 0x6d, 0x61, 0x43,
	0x69, 0x70, 0x68, 0x65, 0x72, 0x74, 0x65, 0x78, 0x74, 0x22, 0x31, 0x0a, 0x12, 0x73, 0x69, 0x67,
	0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x31, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x12,
	0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0xec, 0x01, 0x0a,
	0x11, 0x73, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x32, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x73, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x73, 0x73, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x67, 0x61,
	0x6d, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x69, 0x67, 0x47, 0x61,
	0x6d, 0x6d, 0x61, 0x12, 0x0c, 0x0a, 0x01, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01,
	0x64, 0x12, 0x0c, 0x0a, 0x01, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x66, 0x12,
	0x13, 0x0a, 0x05, 0x64, 0x5f, 0x68, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04,
	0x64, 0x48, 0x61, 0x74, 0x12, 0x13, 0x0a, 0x05, 0x66, 0x5f, 0x68, 0x61, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x66, 0x48, 0x61, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x66, 0x66,
	0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61,
	0x66, 0x66, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x66, 0x66, 0x67,
	0x5f, 0x68, 0x61, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x61, 0x66, 0x66, 0x67, 0x48, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66, 0x22, 0x63, 0x0a, 0x11, 0x73,
	0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x33, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x05, 0x64, 0x65, 0x6c, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x69, 0x67, 0x5f, 0x64, 0x65,
	0x6c, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x62, 0x69, 0x67, 0x44, 0x65,
	0x6c, 0x74, 0x61, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x6f, 0x67, 0x5f, 0x70, 0x72, 0x6f, 0x6f, 0x66,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x6c, 0x6f, 0x67, 0x50, 0x72, 0x6f, 0x6f, 0x66,
	0x22, 0x29, 0x0a, 0x11, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x34, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x73, 0x69, 0x67, 0x6d, 0x61, 0x42, 0x0c, 0x5a, 0x0a, 0x65,
	0x63, 0x64, 0x73, 0x61, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_sign_proto_rawDescOnce sync.Once
	file_sign_proto_rawDescData = file_sign_proto_rawDesc
)

func file_sign_proto_rawDescGZIP() []byte {
	file_sign_proto_rawDescOnce.Do(func() {
		file_sign_proto_rawDescData = protoimpl.X.CompressGZIP(file_sign_proto_rawDescData)
	})
	return file_sign_proto_rawDescData
}

var file_sign_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_sign_proto_goTypes = []interface{}{
	(*SignRound1Message1)(nil), // 0: tsslib.cggmp.sign.ecdsa.signRound1Message1
	(*SignRound1Message2)(nil), // 1: tsslib.cggmp.sign.ecdsa.signRound1Message2
	(*SignRound2Message)(nil),  // 2: tsslib.cggmp.sign.ecdsa.signRound2Message
	(*SignRound3Message)(nil),  // 3: tsslib.cggmp.sign.ecdsa.signRound3Message
	(*SignRound4Message)(nil),  // 4: tsslib.cggmp.sign.ecdsa.SignRound4Message
}
var file_sign_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_sign_proto_init() }
func file_sign_proto_init() {
	if File_sign_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sign_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound1Message1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound1Message2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound2Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound3Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sign_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignRound4Message); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sign_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sign_proto_goTypes,
		DependencyIndexes: file_sign_proto_depIdxs,
		MessageInfos:      file_sign_proto_msgTypes,
	}.Build()
	File_sign_proto = out.File
	file_sign_proto_rawDesc = nil
	file_sign_proto_goTypes = nil
	file_sign_proto_depIdxs = nil
}
